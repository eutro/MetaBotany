buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def configFile = file('build.properties')
def config = parseConfig(configFile)

version = "${config.phase}-${config.major}.${config.minor}.${config.patch}"
group = 'eutros.botaniapp'
archivesBaseName = mod_name

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

repositories {
    mavenCentral()
    maven {
        name "yarn2mcp"
        url "https://maven.tterrag.com/"
    }
    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name "curios"
        url "https://maven.theillusivec4.top/"
    }
}

minecraft {
    mappings channel: 'snapshot', version: "20200123-mixed-1.15.2"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'
            workingDirectory project.file('run')
            mods {
                botaniapp {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                botaniapp {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'botaniapp', '--all', '--output', file('src/generated/resources/')

            mods {
                botaniapp {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.25'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"
    compileOnly fg.deobf('vazkii.botania:Botania:r1.15-381.104:api')
    compile fg.deobf('vazkii.botania:Botania:r1.15-381.104')

    compile fg.deobf("vazkii.patchouli:Patchouli:1.15.2-1.2-28.146") { transitive = false }

    compileOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.2:api")
    runtimeOnly fg.deobf("mezz.jei:jei-1.15.2:6.0.0.2")

    compileOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-1.15.2-2.0:api")
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios:FORGE-1.15.2-2.0")
    implementation 'org.jetbrains:annotations:15.0'
}

jar {
    manifest {
        attributes([
                "Specification-Title": "botaniapp",
                "Specification-Vendor": "botaniappsareus",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"botaniappsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

task incrementPatch {
    doFirst {
        config.patch = (config.patch.toString().toInteger()) + 1
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

task buildAndIncrement {
    dependsOn(build, incrementPatch)
}

static def parseConfig(File config) {
    if(config.exists()){
        config.withReader {
            def prop = new Properties()
            prop.load(it)
            return (new ConfigSlurper().parse(prop))
        }
    } else {
        return null
    }
}
